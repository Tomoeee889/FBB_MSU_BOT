import datetime
import logging
import traceback
from typing import List

from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
import app.states as st
from app.states import Organization
import app.dictionaries as dicty
from aiogram.types import ReplyKeyboardRemove, Message
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, DateTime, text
from sqlalchemy.orm import declarative_base, sessionmaker, relationship, Session
from sqlalchemy.sql import func

logger = logging.getLogger(__name__)
router = Router()

ATTITUDE = dicty.ATTITUDE
ORGANIZATION = dicty.ORGANIZATION
COURSES = dicty.COURSES
ALL_PREFIXES = [t["prefix"] for course in COURSES.values() for t in course["teachers"]]
ORG_PREFIXES = list(ORGANIZATION.keys())

Base = declarative_base()
DATABASE_URL = "sqlite:///survey.db"
engine = create_engine(
    DATABASE_URL,
    connect_args={"check_same_thread": False},
    pool_pre_ping=True
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class TeacherRating(Base):
    __tablename__ = 'teacher_ratings'
    id = Column(Integer, primary_key=True)
    survey_id = Column(Integer, ForeignKey('surveys.id'))
    teacher_prefix = Column(String(20), nullable=False)
    teacher_name = Column(String(100), nullable=False)
    mark = Column(String(20))
    att = Column(String(50))
    com = Column(Text)
    survey = relationship("Survey", back_populates="teacher_ratings")

class OrgRating(Base):
    __tablename__ = 'org_ratings'
    id = Column(Integer, primary_key=True)
    survey_id = Column(Integer, ForeignKey('surveys.id'))
    category = Column(String(10), nullable=False)
    rating = Column(Integer, nullable=True)  # –†–∞–∑—Ä–µ—à–µ–Ω—ã NULL-–∑–Ω–∞—á–µ–Ω–∏—è
    survey = relationship("Survey", back_populates="org_ratings")

class Survey(Base):
    __tablename__ = 'surveys'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, nullable=False, unique=True)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)
    name = Column(String(100), nullable=False)
    status = Column(String(20), nullable=False)
    grad_stat = Column(String(10))
    stud_course = Column(String(10), nullable=False)
    teacher_ratings = relationship("TeacherRating", back_populates="survey")
    org_ratings = relationship("OrgRating", back_populates="survey")

def create_tables():
    Base.metadata.create_all(bind=engine)
    with engine.connect() as conn:
        conn.execute(text("PRAGMA journal_mode=WAL;"))
        conn.execute(text("PRAGMA synchronous=NORMAL;"))
        conn.commit()

create_tables()

def check_user_exists(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with SessionLocal() as session:
            existing_user = session.query(Survey).filter(Survey.user_id == user_id).first()
            return existing_user is not None
    except Exception as e:
        logger.error(f"Error checking user existence: {e}")
        return False

def create_comment_keyboard(prefix: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{prefix}_com_skip")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=f"{prefix}_com_back")
    builder.adjust(2) 
    return builder.as_markup()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø—Ä–æ—Å
    user_id = message.from_user.id
    if check_user_exists(user_id):
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        return
    
    await state.set_state(st.Register.name)
    await state.update_data(user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! üòáüòáüòá\n–≠—Ç–æ - –æ–ø—Ä–æ—Å –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –§–ë–ë –ú–ì–£. –î–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç—ã, —Ç–∞–∫ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –±—É–¥—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å—Å—è –Ω–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –ª—É—á—à–µ. –í –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –¥–µ–∫–∞–Ω–∞ –ø–æ —É—á–µ–±–Ω–æ–π, —É—á–µ–±–Ω–æ-–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–π –∏ –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –∞ —Ç–∞–∫–∂–µ –ø—è—Ç–µ—Ä–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. \n\n –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û (–Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å):',
        reply_markup=kb.keyboard_com
    )

@router.message(st.Register.name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(st.Register.status)
    await message.answer('–ö–µ–º –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=kb.status_keyboard)

@router.callback_query(F.data == "skip_name", st.Register.name)
async def skip_name(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    await state.update_data(name="–ê–Ω–æ–Ω–∏–º")
    await state.set_state(st.Register.status)
    await callback.message.answer('–ö–µ–º –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=kb.status_keyboard)

@router.callback_query(F.data == 'student')
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    await state.update_data(status='–°—Ç—É–¥–µ–Ω—Ç')
    await state.set_state(st.Register.stud_course)
    await callback.message.answer("–ö–∞–∫–æ–π —Å–µ–º–µ—Å—Ç—Ä –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏?", reply_markup=kb.course_keyboard)

@router.callback_query(F.data == 'graduated')
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    await state.set_state(st.Register.grad_stat)
    await state.update_data(status='–í—ã–ø—É—Å–∫–Ω–∏–∫')
    await callback.message.answer('–ö–∞–∫–æ–π –í—ã –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞?', reply_markup=kb.grad_year)

@router.callback_query(lambda c: c.data.startswith("grad_"))
async def callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    year = callback.data.split("_")[1]
    await state.update_data(grad_stat=year)
    await state.set_state(st.Register.stud_course)
    await callback.message.answer('–ó–∞ –∫–∞–∫–æ–π —Å–µ–º–µ—Å—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?', reply_markup=kb.course_keyboard)

@router.callback_query(F.data == "back_reg")
async def back_registration(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    current_state = await state.get_state()
    
    if current_state == st.Register.status:
        await state.set_state(st.Register.name)
        await callback.message.answer('–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:', reply_markup=kb.keyboard_com)
        
    elif current_state == st.Register.grad_stat:
        await state.set_state(st.Register.status)
        await callback.message.answer('–ö–µ–º –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=kb.status_keyboard)
        
    elif current_state == st.Register.stud_course:
        data = await state.get_data()
        if data.get('status') == '–í—ã–ø—É—Å–∫–Ω–∏–∫':
            await state.set_state(st.Register.grad_stat)
            await callback.message.answer('–ö–∞–∫–æ–π –í—ã –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞?', reply_markup=kb.grad_year)
        else:
            await state.set_state(st.Register.status)
            await callback.message.answer('–ö–µ–º –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', reply_markup=kb.status_keyboard)

@router.callback_query(lambda c: c.data.startswith("cs_"))
async def choose_course(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
        
    course = callback.data.split("_")[1]
    if course not in COURSES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å")
        return
        
    course_data = COURSES[course]
    teachers = course_data["teachers"]
    
    await state.update_data(
        stud_course=course,
        all_teachers=[t["prefix"] for t in teachers],
        completed_teachers=[]
    )
    
    first_teacher = teachers[0]
    await state.set_state(first_teacher["states"]["mark"])
    await state.update_data(current_teacher=first_teacher["prefix"])
    
    await callback.message.answer(
        f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{first_teacher["name"]}</b>',
        reply_markup=first_teacher["keyboards"]["mark"],
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.endswith("_skip_teacher"))
async def handle_skip_teacher(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise

    parts = callback.data.split('_')
    prefix = '_'.join(parts[:-2])
    
    data = await state.get_data()
    current_teacher = data.get("current_teacher")
    
    if current_teacher != prefix:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    
    await state.update_data({
        f"{prefix}_mark": "–ø—Ä–æ–ø—É—â–µ–Ω–æ",
        f"{prefix}_att": "–ø—Ä–æ–ø—É—â–µ–Ω–æ",
        f"{prefix}_com": "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
    })
    
    completed = data.get("completed_teachers", [])
    completed.append(prefix)
    all_teachers = data["all_teachers"]
    await state.update_data(completed_teachers=completed)
    
    remaining = [p for p in all_teachers if p not in completed]
    
    if remaining:
        next_teacher_prefix = remaining[0]
        course_data = COURSES[data["stud_course"]]
        next_teacher = None
        for t in course_data["teachers"]:
            if t["prefix"] == next_teacher_prefix:
                next_teacher = t
                break
        
        if not next_teacher:
            await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(current_teacher=next_teacher_prefix)
        await state.set_state(next_teacher["states"]["mark"])
        
        await callback.message.answer(
            f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{next_teacher["name"]}</b>',
            reply_markup=kb.keyboard_marks(next_teacher_prefix),
            parse_mode="HTML"
        )
    else:
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await state.update_data(teachers_completed=True)
        await state.set_state(Organization.bit)
        await callback.message.answer(
            f'–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:\n\n<b>{ORGANIZATION["bit"]}</b>',
            reply_markup=kb.keyboard_marks_org("bit"),
            parse_mode="HTML"
        )

all_teacher_states = []
for course in COURSES.values():
    for teacher in course["teachers"]:
        all_teacher_states.append(teacher["states"]["mark"])
        all_teacher_states.append(teacher["states"]["att"])
        all_teacher_states.append(teacher["states"]["com"])

@router.callback_query(lambda c: c.data.endswith("_back"), StateFilter(*all_teacher_states))
async def handle_teacher_back(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
    
    data = await state.get_data()
    current_teacher_prefix = data.get("current_teacher")
    
    if not current_teacher_prefix:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return
    
    course = data.get("stud_course")
    if not course:
        await callback.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return
    teacher = None
    for t in COURSES.get(course, {}).get("teachers", []):
        if t["prefix"] == current_teacher_prefix:
            teacher = t
            break
    
    if not teacher:
        logger.error(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{current_teacher_prefix}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É—Ä—Å–µ '{course}'")
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    current_state = await state.get_state()
    states = teacher["states"]
    if current_state == states["att"]:
        await state.set_state(states["mark"])
        await callback.message.answer(
            f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{teacher["name"]}</b>',
            reply_markup=teacher["keyboards"]["mark"],
            parse_mode="HTML"
        )
    elif current_state == states["com"]:
        await state.set_state(states["att"])
        await callback.message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–∞:\n\n<b>{teacher["name"]}</b>',
            reply_markup=teacher["keyboards"]["att"],
            parse_mode="HTML"
        )
    elif current_state == states["mark"]:
        all_teachers = data.get("all_teachers", []) 
        if not all_teachers:
            await callback.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return   
        try:
            current_index = all_teachers.index(current_teacher_prefix)
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            return
        
        if current_index == 0:
            await state.set_state(st.Register.stud_course)
            await callback.message.answer(
                '–ó–∞ –∫–∞–∫–æ–π —Å–µ–º–µ—Å—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?',
                reply_markup=kb.course_keyboard
            )
        else:
            prev_teacher_prefix = all_teachers[current_index - 1]
            prev_teacher = None
            for t in COURSES[course]["teachers"]:
                if t["prefix"] == prev_teacher_prefix:
                    prev_teacher = t
                    break
            
            if not prev_teacher:
                logger.error(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{prev_teacher_prefix}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await callback.answer("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            await state.update_data(current_teacher=prev_teacher_prefix)
            prev_mark = data.get(f"{prev_teacher_prefix}_mark")
            if prev_mark == "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
                await state.set_state(prev_teacher["states"]["mark"])
                await callback.message.answer(
                    f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{prev_teacher["name"]}</b>',
                    reply_markup=prev_teacher["keyboards"]["mark"],
                    parse_mode="HTML"
                )
            else:
                await state.set_state(prev_teacher["states"]["com"])
                await callback.message.answer(
                    f'–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—Å—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n<b>{prev_teacher["name"]}</b>',
                    reply_markup=create_comment_keyboard(prev_teacher_prefix),
                    parse_mode="HTML"
                )
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥: {current_state}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
    

@router.callback_query(lambda c: any(c.data.startswith(f"{prefix}_") for prefix in ALL_PREFIXES))
async def handle_teacher_action(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
    
    if callback.data.endswith("_back"):
        return
    
    data = await state.get_data()
    current_teacher_prefix = data.get("current_teacher")
    
    if not current_teacher_prefix:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return
    
    parts = callback.data.split("_")
    prefix = parts[0]
    action_type = parts[1]
    
    if prefix != current_teacher_prefix:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    if action_type == "com" and len(parts) > 2 and parts[2] == "skip":
        await state.update_data({f"{prefix}_com": "–ø—Ä–æ–ø—É—â–µ–Ω–æ"})
        await handle_teacher_comment(callback.message, state, skip_message=True)
        return
    
    if action_type == "att" and len(parts) > 2 and parts[2] == "skip":
        value = "skip"
    else:
        value = "_".join(parts[2:]) if len(parts) > 2 else ""
    
    data_key = f"{prefix}_{action_type}"
    save_value = ATTITUDE.get(value, value) if action_type == "att" else value
    await state.update_data({data_key: save_value})
    
    if action_type == "mark":
        next_action = "att"
    elif action_type == "att":
        next_action = "com"
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return
    
    course_data = COURSES[data["stud_course"]]
    teacher = None
    for t in course_data["teachers"]:
        if t["prefix"] == prefix:
            teacher = t
            break
    
    if not teacher:
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    next_state = teacher["states"][next_action]
    await state.set_state(next_state)
    
    message_text = f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{teacher["name"]}</b>\n\n'
    if next_action == "att":
        message_text += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–∞:'
        reply_markup = teacher["keyboards"][next_action]
    else:
        message_text += '–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—Å—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):'
        reply_markup = create_comment_keyboard(prefix)
    
    await callback.message.answer(
        message_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

@router.message(StateFilter(*[t["states"]["com"] for c in COURSES.values() for t in c["teachers"]]))
async def handle_teacher_comment(message: Message, state: FSMContext, skip_message=False):
    
    data = await state.get_data()
    current_teacher_prefix = data.get("current_teacher")
    
    if not current_teacher_prefix:
        await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        await state.clear()
        return
    
    if not skip_message:
        comment = message.text
        await state.update_data({f"{current_teacher_prefix}_com": comment})
    
    completed = data.get("completed_teachers", [])
    completed.append(current_teacher_prefix)
    all_teachers = data["all_teachers"]
    
    await state.update_data(completed_teachers=completed)
    
    remaining = [p for p in all_teachers if p not in completed]
    
    if remaining:
        next_teacher_prefix = remaining[0]
        course_data = COURSES[data["stud_course"]]
        next_teacher = None
        for t in course_data["teachers"]:
            if t["prefix"] == next_teacher_prefix:
                next_teacher = t
                break
        
        if not next_teacher:
            await message.answer("–û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(current_teacher=next_teacher_prefix)
        await state.set_state(next_teacher["states"]["mark"])
        
        await message.answer(
            f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{next_teacher["name"]}</b>',
            reply_markup=next_teacher["keyboards"]["mark"],
            parse_mode="HTML"
        )
    else:
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await state.update_data(teachers_completed=True)
        await state.set_state(Organization.bit)
        await message.answer(
            f'–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:\n\n<b>{ORGANIZATION["bit"]}</b>',
            reply_markup=kb.keyboard_marks_org("bit"),
            parse_mode="HTML"
        )

async def go_to_next_org_question(current_prefix: str, message: Message, state: FSMContext):
    keys = list(ORGANIZATION.keys())
    current_index = keys.index(current_prefix)
    next_index = current_index + 1
    
    if next_index < len(keys):
        next_prefix = keys[next_index]
        next_state = getattr(Organization, next_prefix)
        await state.set_state(next_state)
        
        await message.answer(
            f'–û—Ü–µ–Ω–∏—Ç–µ:\n\n<b>{ORGANIZATION[next_prefix]}</b>',
            reply_markup=kb.keyboard_marks_org(next_prefix),
            parse_mode="HTML"
        )
    else:
        await finish_survey(message, state)

async def go_to_prev_org_question(current_prefix: str, message: Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {current_prefix}")
    keys = list(ORGANIZATION.keys())
    
    try:
        current_index = keys.index(current_prefix)
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    prev_index = current_index - 1

    if prev_index >= 0:
        prev_prefix = keys[prev_index]
        try:
            prev_state = getattr(Organization, prev_prefix)
        except AttributeError:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await state.set_state(prev_state)
        await message.answer(
            f'–û—Ü–µ–Ω–∏—Ç–µ:\n\n<b>{ORGANIZATION[prev_prefix]}</b>',
            reply_markup=kb.keyboard_marks_org(prev_prefix),
            parse_mode = "HTML"
        )
    else:
        data = await state.get_data()
        course = data.get("stud_course")
        if not course:
            await finish_survey(message, state)
            return
            
        course_data = COURSES.get(course)
        if not course_data:
            await finish_survey(message, state)
            return
            
        teachers = course_data.get("teachers", [])
        if teachers:
            last_teacher = teachers[-1]
            last_teacher_prefix = last_teacher["prefix"]
            teacher_mark = data.get(f"{last_teacher_prefix}_mark", None)
            if teacher_mark == "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
                next_state = last_teacher["states"]["mark"]
                message_text = f'–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n<b>{last_teacher["name"]}</b>'
                reply_markup = last_teacher["keyboards"]["mark"]
            else:
                next_state = last_teacher["states"]["com"]
                message_text = f'–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—Å—É:\n\n<b>{last_teacher["name"]}</b>'
                reply_markup = create_comment_keyboard(last_teacher_prefix)
            await state.update_data(
                completed_teachers=[t for t in data.get("completed_teachers", []) if t != last_teacher_prefix],
                teachers_completed=False,
                current_teacher=last_teacher_prefix
            )
            await state.set_state(next_state)
            
            await message.answer(
                message_text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await finish_survey(message, state)

def save_survey_to_db(survey_data: dict) -> bool:
    try:
        with SessionLocal() as session:
            survey_record = Survey(
                user_id=survey_data.get('user_id'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                name=survey_data.get('name', ''),
                status=survey_data.get('status', ''),
                grad_stat=survey_data.get('grad_stat', ''),
                stud_course=survey_data.get('stud_course', '')
            )
            
            teacher_ratings = []
            for prefix in survey_data.get('all_teachers', []):
                teacher_found = None
                course = survey_data.get("stud_course")
                if course in COURSES:
                    for teacher in COURSES[course]['teachers']:
                        if teacher['prefix'] == prefix:
                            teacher_found = teacher
                            break
                
                if teacher_found:
                    teacher_ratings.append(TeacherRating(
                        teacher_prefix=prefix,
                        teacher_name=teacher_found['name'],
                        mark=survey_data.get(f"{prefix}_mark", ""),
                        att=survey_data.get(f"{prefix}_att", ""),
                        com=survey_data.get(f"{prefix}_com", "")
                    ))
            
            org_ratings = []
            for prefix in ORG_PREFIXES:
                rating_value = survey_data.get(f"org_{prefix}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
                if rating_value is None or rating_value == "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
                    rating_int = None
                elif isinstance(rating_value, str) and rating_value.isdigit():
                    rating_int = int(rating_value)
                else:
                    rating_int = None  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                org_ratings.append(OrgRating(
                    category=prefix,
                    rating=rating_int
                ))
            
            survey_record.teacher_ratings = teacher_ratings
            survey_record.org_ratings = org_ratings
            session.add(survey_record)
            session.commit()
            survey_id = survey_record.id
            logger.info(f"Survey data saved to DB: ID {survey_id}, User ID {survey_data.get('user_id')}")
        
        return True
    
    except Exception as e:
        logger.error(f"Error saving survey to database: {e}\n{traceback.format_exc()}")
        return False

async def finish_survey(message: Message, state: FSMContext):
    survey_data = await state.get_data()
    report = "üìä –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    report += f"–ò–º—è: {survey_data.get('name', '')}\n–°—Ç–∞—Ç—É—Å: {survey_data.get('status', '')}\n"
    
    if survey_data.get('grad_stat'):
        report += f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {survey_data['grad_stat']}\n"
        
    report += f"–ö—É—Ä—Å: {survey_data.get('stud_course', '')}\n\n"
    for teacher_prefix in survey_data.get('all_teachers', []):
        teacher_found = None
        course = survey_data.get("stud_course")
        if course in COURSES:
            for teacher in COURSES[course]['teachers']:
                if teacher['prefix'] == teacher_prefix:
                    teacher_found = teacher
                    break
        
        if teacher_found:
            mark = survey_data.get(f"{teacher_prefix}_mark", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            attitude = survey_data.get(f"{teacher_prefix}_att", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            comment = survey_data.get(f"{teacher_prefix}_com", "–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            
            report += f"üë®‚Äçüè´ {teacher_found['name']}:\n"
            report += f"  ‚Ä¢ –û—Ü–µ–Ω–∫–∞: {mark}\n"
            report += f"  ‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {attitude}\n"
            report += f"  ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
    
    report += "üèõ –û—Ü–µ–Ω–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n"
    for prefix in ORG_PREFIXES:
        value = survey_data.get(f"org_{prefix}", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ None –≤ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        if value is None or value == "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
            display_value = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            display_value = value
        report += f"  ‚Ä¢ {ORGANIZATION[prefix]}: {display_value}\n"
    
    try:
        success = save_survey_to_db(survey_data)
        
        if success:
            await message.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            await message.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
    except Exception as e:
        logger.error(f"Error in finish_survey: {e}")
        await message.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

@router.callback_query(lambda c: c.data.endswith("_back"), StateFilter(Organization))
async def handle_org_back(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise
    
    parts = callback.data.split('_')
    prefix = parts[0]
    
    if prefix not in ORG_PREFIXES:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {prefix}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return
    
    await go_to_prev_org_question(prefix, callback.message, state)

@router.callback_query(lambda c: any(c.data.startswith(prefix) for prefix in ORG_PREFIXES), StateFilter(Organization))
async def handle_org_action(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"Expired callback skipped: {callback.data}")
            return
        raise

    data_str = callback.data
    prefix = data_str.split('_')[0]
    
    if prefix not in ORG_PREFIXES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return
    if any(data_str.endswith(f"_{i}") for i in range(1, 11)):
        mark_value = data_str.split('_')[-1]
        await state.update_data({f"org_{prefix}": mark_value})
        await go_to_next_org_question(prefix, callback.message, state)
    elif data_str.endswith("_skip"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º None –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await state.update_data({f"org_{prefix}": None})
        await go_to_next_org_question(prefix, callback.message, state)
    
@router.message(StateFilter(
    Organization.bit,
    Organization.admin,
    Organization.psycho,
    Organization.atm,
    Organization.sch,
    Organization.exa))

async def handle_org_text(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏")